// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: blog_servicer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogServicerClient is the client API for BlogServicer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServicerClient interface {
	// Create Post
	// Input: Post details (Title, Content, Author, Publication Date, Tags)
	// Output: The Post (PostID, Title, Content, Author, Publication Date, Tags). Error message, if creation fails.
	CreatePost(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Read Post
	// Input: PostID of the post to retrieve
	// Output: Post details (PostID, Title, Content, Author, Publication Date, Tags) or an error message if the post is not found.
	GetPost(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Update Post
	// Input: PostID of the post to update and new details (Title, Content, Author, Tags)
	// Output: Post details (PostID, Title, Content, Author, Publication Date, Tags) or error message if the update failed
	UpdatePost(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete Post
	// Input: PostID of the post to delete
	// Output: Success/Failure message
	DeletePost(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type blogServicerClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServicerClient(cc grpc.ClientConnInterface) BlogServicerClient {
	return &blogServicerClient{cc}
}

func (c *blogServicerClient) CreatePost(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/blog_service.BlogServicer/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServicerClient) GetPost(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/blog_service.BlogServicer/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServicerClient) UpdatePost(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/blog_service.BlogServicer/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServicerClient) DeletePost(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/blog_service.BlogServicer/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServicerServer is the server API for BlogServicer service.
// All implementations must embed UnimplementedBlogServicerServer
// for forward compatibility
type BlogServicerServer interface {
	// Create Post
	// Input: Post details (Title, Content, Author, Publication Date, Tags)
	// Output: The Post (PostID, Title, Content, Author, Publication Date, Tags). Error message, if creation fails.
	CreatePost(context.Context, *CreateRequest) (*CreateResponse, error)
	// Read Post
	// Input: PostID of the post to retrieve
	// Output: Post details (PostID, Title, Content, Author, Publication Date, Tags) or an error message if the post is not found.
	GetPost(context.Context, *GetRequest) (*GetResponse, error)
	// Update Post
	// Input: PostID of the post to update and new details (Title, Content, Author, Tags)
	// Output: Post details (PostID, Title, Content, Author, Publication Date, Tags) or error message if the update failed
	UpdatePost(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete Post
	// Input: PostID of the post to delete
	// Output: Success/Failure message
	DeletePost(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedBlogServicerServer()
}

// UnimplementedBlogServicerServer must be embedded to have forward compatible implementations.
type UnimplementedBlogServicerServer struct {
}

func (UnimplementedBlogServicerServer) CreatePost(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedBlogServicerServer) GetPost(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedBlogServicerServer) UpdatePost(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedBlogServicerServer) DeletePost(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedBlogServicerServer) mustEmbedUnimplementedBlogServicerServer() {}

// UnsafeBlogServicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServicerServer will
// result in compilation errors.
type UnsafeBlogServicerServer interface {
	mustEmbedUnimplementedBlogServicerServer()
}

func RegisterBlogServicerServer(s grpc.ServiceRegistrar, srv BlogServicerServer) {
	s.RegisterService(&BlogServicer_ServiceDesc, srv)
}

func _BlogServicer_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServicerServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog_service.BlogServicer/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServicerServer).CreatePost(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServicer_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServicerServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog_service.BlogServicer/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServicerServer).GetPost(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServicer_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServicerServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog_service.BlogServicer/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServicerServer).UpdatePost(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogServicer_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServicerServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blog_service.BlogServicer/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServicerServer).DeletePost(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogServicer_ServiceDesc is the grpc.ServiceDesc for BlogServicer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogServicer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog_service.BlogServicer",
	HandlerType: (*BlogServicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _BlogServicer_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _BlogServicer_GetPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _BlogServicer_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _BlogServicer_DeletePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog_servicer.proto",
}
